#!/bin/bash
walltime=450
cpus=48
QuEuE=${1:-debug}
shift
#
unset QUEUE_1CPU
unset QUEUE_2CPU
unset QUEUE_3CPU
unset QUEUE_4CPU
#
# example using 32 cores (2 nodes with 16 cores each)
# 2 10 way queue  (2 threads per process)
# 1 2 way queues (2 threads per process)
# 4 1 way queues (1 thread per process)
#
#cat <<\EOJ
cat <<\EOJ |  ord_soumet - -t ${walltime} -mpi -cpus ${cpus}x1 -jn STREAM_${name}-debug -shell nologin -q ${QuEuE} "$@"
walltime=450
nodesize=16
#
# get list of processes for which a taskset will have to be applied
#
export MyProcesses=""
for i in $(pgrep -u $USER) ; do kill -s 0 $i && MyProcesses="$MyProcesses $i" ; done
echo === $MyProcesses ===
cat $PBS_NODEFILE
export SAVE_HOSTFILE=$PBS_NODEFILE
export NODEFILE_PBS=${PBS_NODEFILE}
export RANKFILE_PBS
#
make_map()
{
((rank=0)) ; incr=${OMP_NUM_THREADS:-1} ; ntiles=${BATCH_MPI_CPUS:-1}
while [[ -n $1 ]] ; do
  arg="$1"
  [[ "$arg" == *:* ]] || arg="$arg:"
  [[ "$arg" == *: ]] && arg="${arg}0-15"
  nodes="${arg%:*}" ; cpus="${arg#*:}"
  [[ "$nodes" == *-* ]] || nodes="${nodes}-${nodes}"
  [[ "$cpus" == *-* ]] || cpus="${cpus}-${cpus}"
  shift
  for n in $(seq $(echo ${nodes}| tr -- '-' " ") ) ; do
   low=${cpus%-*} ; high=${cpus#*-}
   while ((low+incr<=high+1 && rank<ntiles)) ; do
     ((incr==1)) && echo "rank $rank=+n$n slot=${low}"
     ((incr>1)) && echo "rank $rank=+n$n slot=${low}-$((low+incr-1))"
     ((low=low+incr)) ; ((rank=rank+1))
   done
  done
done
}
#
instanciate() # arguments will be passed to make_map
{
  Arg1="${1}"
# NODEFILE_PBS=${NodeFileDir}/${name}-${instance}
  RANKFILE_PBS=${NodeFileDir}/${name}-${instance}
# rm -f ${NODEFILE_PBS}
# ((nlocal>0)) && echo ${LocalHost} slots=${nlocal} >>${NODEFILE_PBS}
# ((first>0)) && cat ${NodeFileDir}/nodes.master | sed "s/$/ slots=$((nodesize/OMP_NUM_THREADS))/" | sed -n ${first},${last}p >>${NODEFILE_PBS}
  echo "======================================================================================" >>${ListingFile}+${name}-${instance}
  chmod 644 ${ListingFile}+${name}-${instance}
# cat ${NODEFILE_PBS} >>${ListingFile}+${name}-${instance}
  make_map $* >${RANKFILE_PBS}
  cat ${RANKFILE_PBS} >>${ListingFile}+${name}-${instance}
  echo "======================================================================================" >>${ListingFile}+${name}-${instance}
  HostTaskset=0-15                                  # default taskset for node 0
  [[ "$Arg1" == 0:* ]] && HostTaskset=${Arg1#0:}    # if a taskset has been specified for node 0, get it
  export HostTaskset
  for p in ${MyProcesses} ; do taskset -cp $HostTaskset $p ; done   # run only on prescribed taskset (node 0 only)
  ${HOME}/ECssm/multi/bin/run_work_stream -name ${name}-${instance} -maxidle $maxidle \
       -queues $queues 2>>${ListingFile}+${name}-${instance} 1>>${ListingFile}+${name}-${instance} &
  for p in ${MyProcesses} ; do taskset -cp 0-15 $p ; done           # run on any cpu
# NODEFILE_PBS=${SAVE_HOSTFILE}
  ((instance=instance+1))
}
#
mkdir -p ${HOME}/.job_queues/nodefiledir
export NodeFileDir="${HOME}/.job_queues/nodefiledir/$(hostname)$(date+%s)"
mkdir ${NodeFileDir} || exit 1
export TODO_UPON_EXIT="rm -rf ${NodeFileDir} ; kill -9 $$"
#
echo $(hostname) >${NodeFileDir}/nodes.master
cat ${PBS_NODEFILE} | grep -v "^$(hostname)" | uniq >>${NodeFileDir}/nodes.master
LocalHost="$(hostname)"
#
export instance=0
export NODEFILE_PBS=${NodeFileDir}/nodes.master
export FORCE_SETUP=yes
export name=""
export queues=""
export maxidle=300
#
#============================================================================================================================
# launch 1 x 20 way queues
#============================================================================================================================
name=micro20 ; queues="${name}" ; BATCH_MPI_CPUS=20 ; export OMP_NUM_THREADS=1 ;   # 20 processes with 1 thread  = 20 cores
instanciate 0:4-7 1:0-15      # node 0 cpus 4-7, node 1 cpus 0-15
#============================================================================================================================
name=micro12 ; queues="${name}" ; BATCH_MPI_CPUS=12 ; export OMP_NUM_THREADS=2 ;   # 12 processes with 2 threads = 24 cores
instanciate 0:8-15 2:0-15      # node 0 cpus 8-15, node 2 cpus 0-15
#============================================================================================================================
# launch 1 x 4 way queues
#============================================================================================================================
#name=micro4 ; queues="${name}" ; BATCH_MPI_CPUS=4 ; export OMP_NUM_THREADS=1
#============================================================================================================================
# launch 1 x 3 way queues
#============================================================================================================================
#name=micro3 ; queues="${name}" ; BATCH_MPI_CPUS=3 ; export OMP_NUM_THREADS=1
#============================================================================================================================
# launch 1 x 2 way queue
#============================================================================================================================
#name=micro2 ; queues="${name}" ; BATCH_MPI_CPUS=2 ; export OMP_NUM_THREADS=1         # 2 cores per instance = 2 cores
#
#instanciate
#instanciate 0:6-7         # node 0, cpus 6-7
#============================================================================================================================
# launch 4 x 1 way queues
#============================================================================================================================
export maxidle=${walltime}
name=micro1 ; queues="${name} ${name}-1" ; BATCH_MPI_CPUS=1 ; export OMP_NUM_THREADS=1         # 1 core per instance = 4 cores
instanciate 0:1           # node 0, cpu 1
instanciate 0:2           # node 0, cpu 2
instanciate 0:3           # node 0, cpu 3
#instanciate 0:5           # node 0, cpu 5
#============================================================================================================================
wait   # wait for backgrounded streams to terminate
#============================================================================================================================
rm -f ${NodeFileDir}/*   # remove node files
rmdir ${NodeFileDir}     # directory should now be empty, remove it
EOJ
